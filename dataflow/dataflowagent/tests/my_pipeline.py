"""
Auto-generated by pipeline_assembler
"""
from dataflow.pipeline import PipelineABC
from dataflow.utils.storage import FileStorage
from dataflow.serving import APILLMServing_request, LocalModelLLMServing_vllm

from dataflow.operators.reasoning.filter.reasoning_answer_groundtruth_filter import ReasoningAnswerGroundTruthFilter
from dataflow.operators.reasoning.filter.reasoning_answer_model_judge_filter import ReasoningAnswerModelJudgeFilter
from dataflow.operators.reasoning.filter.reasoning_question_filter import ReasoningQuestionFilter
from dataflow.operators.reasoning.filter.reasoning_answer_groundtruth_filter import ReasoningAnswerGroundTruthFilter
from dataflow.operators.reasoning.filter.reasoning_answer_model_judge_filter import ReasoningAnswerModelJudgeFilter
from dataflow.operators.reasoning.filter.reasoning_question_filter import ReasoningQuestionFilter
from dataflow.prompts.reasoning.math import MathQuestionFilterPrompt



class RecommendPipeline(PipelineABC):
    def __init__(self):
        super().__init__()
        # -------- FileStorage --------
        self.storage = FileStorage(
            first_entry_file_name="/tmp/mq_test_data_sample_10.jsonl",
            cache_path="./cache_local",
            file_name_prefix="dataflow_cache_step",
            cache_type="jsonl",
        )
        # -------- LLM Serving (Remote) --------
        self.llm_serving = APILLMServing_request(
            api_url="http://123.129.219.111:3000/v1/chat/completions",
            key_name_of_api_key="DF_API_KEY",
            model_name="gpt-4o",
            max_workers=100,
        )

        self.reasoning_question_filter = ReasoningQuestionFilter(system_prompt='You are a helpful assistant.', llm_serving=self.llm_serving, prompt_template=MathQuestionFilterPrompt())
        self.reasoning_answer_model_judge_filter = ReasoningAnswerModelJudgeFilter(system_prompt='You are a helpful assistant specialized in evaluating answer correctness.', llm_serving=self.llm_serving, prompt_template=None, keep_all_samples=False)
        self.reasoning_answer_ground_truth_filter = ReasoningAnswerGroundTruthFilter(compare_method='math_verify')

    def forward(self):
        self.reasoning_question_filter.run(
            storage=self.storage.step(), input_key='math_problem'
        )
        self.reasoning_answer_model_judge_filter.run(
            storage=self.storage.step(), input_question_key='question', input_answer_key='answer', input_reference_key='reference_answer'
        )
        self.reasoning_answer_ground_truth_filter.run(
            storage=self.storage.step(), input_test_answer_key='generated_cot', input_gt_answer_key='golden_answer'
        )

if __name__ == "__main__":
    pipeline = RecommendPipeline()
    pipeline.compile()
    pipeline.forward()
